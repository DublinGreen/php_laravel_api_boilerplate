openapi: 3.0.3
info:
  title: Lumen Boilerplate - OpenAPI 3.0
  description: >-
    A lumen application with docker containers for php, mysql and nginx. Using migration and seeders. User basic routes with JWT configurations and Bearer token for protected routes.

    Some useful links:

    - [The lumen git repo Store
    repository](https://github.com/DublinGreen/php_laravel_api_boilerplate/tree/main?tab=readme-ov-file)

    - [The source API definition for the API](https://github.com/DublinGreen/php_laravel_api_boilerplate/blob/main/openapi.yaml)
  termsOfService: https://opensource.org/license/MIT
  contact:
    email: greendublin007@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://9a70-102-89-46-175.ngrok-free.app/api/v1/
tags:
  - name: user
    description: Everything about user operations
    externalDocs:
      description: user endpoints
      url: http://swagger.io
paths:
  /user/create:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/login:
    post:
      tags:
        - user
      summary: Login user
      description: This can only be done by the logged in user.
      operationId: user-create
      requestBody:
        description: Login user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'                
  /user/forgot-password:
    post:
      tags:
        - user
      summary: Init a forgot-password process
      description: Init a forgot-password process
      operationId: /user/forgot-password
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/reset-password-token:
    post:
      tags:
        - user
      summary: Init a reset-password-token process
      description: Init a reset-password-token process
      operationId: /user/reset-password-token
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
        - in: query
          name: password
          required: true
          schema:
            type: string 
        - in: query
          name: password_confirmation
          required: true
          schema:
            type: string 
        - in: query
          name: token
          required: true
          schema:
            type: string             
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation          
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user:
    get:
      tags:
        - users
      summary: Get users data
      description: ''
      operationId: users
      parameters: []
      responses:
        default:
          description: successful operation
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 19287576-cbc8-4395-8e21-ca77277d2fb8
        first_name:
          type: string
          example: Bernard
        last_name:
          type: string
          example: Dublin-Green
        is_admin:
          type: string
          example: YES
        is_marketing:
          type: string
          example: YES  
        email:
          type: string
          example: greendublin007@gmail.com
        password:
          type: string
          example: 'test'
        phone_number:
          type: string
          example: '7032090809'
      xml:
        name: user
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  # optional, for documentation purposes only
security:
  - bearerAuth: []      